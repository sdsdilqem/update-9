generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  username          String         @unique
  email             String         @unique
  password          String
  avatar            String?
  verificationLevel String         @default("BASIC")
  trustScore        Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  notifications     Notification[]
  sentMessages      Message[]      @relation("SentMessages")
  receivedMessages  Message[]      @relation("ReceivedMessages")
}

model Post {
  id          String    @id @default(uuid())
  title       String
  description String
  price       Float
  imageUrls   String    // Store as JSON string
  status      String    @default("AVAILABLE")
  isSponsored Boolean   @default(false)
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Message {
  id          String   @id @default(uuid())
  content     String
  createdAt   DateTime @default(now())
  senderId    String
  receiverId  String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  isRead      Boolean  @default(false)
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  title     String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}